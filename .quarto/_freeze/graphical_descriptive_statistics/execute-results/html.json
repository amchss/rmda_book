{
  "hash": "23b14fc36c71ece10d785b01cead35cc",
  "result": {
    "engine": "knitr",
    "markdown": "---\noutput: html_document\ntoc: true\ntoc-title: On this Page\nnumber-sections: true\nnumber-depth: 3\neditor_options: \n  chunk_output_type: console\nembed-resources: true\n---\n\n\n\n\n# Descriptive Analysis: Graphical Methods\n\nGraphical methods are crucial for understanding data at a glance. Depending on the number and type of variables, we use different graphical techniques. The graphical methods provided here are just some of the available methods for data visualization. There are many others that can be explored in more detail later. This is intended to be a basic introduction to help you get started.\n\n## Graphical Methods for a Single Variable\n\n| **Variable Type** | **Graphical Method** | **Description** |\n|------------------|------------------|------------------------------------|\n| **Categorical (Nominal / Ordinal)** | Bar Chart | Shows frequency or proportion of categories |\n| **Discrete (Integer)** | Histogram | Displays the count of values across defined intervals |\n|  | Dot Plot | Shows individual data points for small datasets |\n| **Continuous (Double)** | Histogram | Shows the frequency distribution of continuous values |\n|  | Box Plot | Displays distribution, including outliers |\n|  | Density Plot | Visualizes the density function |\n\n## Graphical Methods for Two Variable Visualization\n\n|   | **Categorical (Nominal / Ordinal)** | Numeric (Discrete / Continuous) |\n|------------------|-----------------------------|---------------------------|\n| **Categorical (Nominal / Ordinal)** | Stacked Bar Chart | Grouped Bar Chart |\n| **Numeric (Discrete / Continuous)** | Grouped Bar Chart | Scatter Plot |\n\n# Data Visualization Using R: Introduction to Grammar of Graphics\n\nData visualization in R can be effectively done using the `ggplot2` package, which is included in the popular `tidyverse` collection of R packages. `ggplot2` is based on the **Grammar of Graphics**, a structured approach that allows you to build plots layer by layer. This grammar provides a framework for describing and creating visualizations by combining different graphical elements. The idea is that any plot can be constructed by breaking it down into components.\n\nThe visualisation using `ggplot2` package, which follows the philosophy of grammar of graphics, breaks down a plot into several components:\n\n-   **Data**: The dataset you're working with.\n\n-   **Aesthetics**: The visual properties (e.g., axes, colors, sizes).\n\n-   **Geometries**: The type of plot (e.g., points, bars, lines).\n\n-   **Facets**: Dividing the data into subplots.\n\n-   **Scales**: Mapping of data values to visual properties.\n\n-   **Coordinates**: How data is projected onto the plane (e.g., Cartesian coordinates).\n\n#### What Happens When You Run `ggplot()`? {.unnumbered}\n\nWhen you run `ggplot()` in R without specifying any further components, it provides you with a blank \"canvas\" (or plane) on which you can build your plot. This is like opening a blank sheet of paper to start drawing. Here’s an example:\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load Packages\n#install.packages(pacman)\n\npacman::p_load(tidyverse, here)\n\n# Load Data\n\ndf1 <- NHANES::NHANES\n\ndf1 <- df1 |> \n  janitor::clean_names()\n\ndf <- df1 |> \n  select(id, survey_yr, gender, age, race1, education, marital_status, hh_income, home_own, home_rooms, poverty, work, weight, height)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Running ggplot without specifying layers\nggplot()\n```\n\n::: {.cell-output-display}\n![](graphical_descriptive_statistics_files/figure-html/unnamed-chunk-2-1.png){width=672}\n:::\n:::\n\n\n\n\nThis will simply give you a blank plot. You then need to add layers to specify what the plot will contain.\n\n#### Aesthetics (aes) {.unnumbered}\n\nAesthetic mappings define how data is mapped to visual properties. They include properties such as:\n\n-   x and y axes: Mapped to variables in your data.\n\n-   color: Used to differentiate categories.\n\n-   size: Used to represent magnitude or importance.\n\nFor example, when you add aesthetics to ggplot(), it tells R how to map data to the plot:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = df, \n       mapping = aes(x = height, y = weight))\n```\n\n::: {.cell-output-display}\n![](graphical_descriptive_statistics_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n\n\n\nIn this example, `height` is mapped to the x-axis and `weight` to the y-axis\n\n#### Layers in `ggplot2` {.unnumbered}\n\nThe power of `ggplot2` lies in its layering system. After creating the base plot with `ggplot()`, you can add multiple layers.\n\nYou add these layers using the + operator\n\nFor Example:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Adding layers to create a plot\nggplot(df, aes(x = height, y = weight)) +\n  geom_point() +\n  labs(title = \"Height vs Weight\",\n       caption = \"Source: NHANES Data\") \n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Removed 366 rows containing missing values or values outside the scale range\n(`geom_point()`).\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](graphical_descriptive_statistics_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\n\n\nHere’s a breakdown of each layer in the example:\n\n-   `ggplot(df, aes(x = height, y = weight))`: This initializes the plot using the `df` dataset. Inside `aes()`, the *x-axis* is mapped to *xvariable (height)*, and the *y-axis* is mapped to *yvariable (weight)*. The aes() function defines aesthetic mappings, determining how data is represented visually.\n\n-   `geom_point()`: This adds a geometric layer, specifically a scatter plot, where each point represents an observation. It visualizes the relationship between x and y\n\n-   `labs(title = \"Height vs Weight\", caption = \"Source: NHANES Data\")`: This layer adds a title and a caption to the plot, making it more interpretable. The title helps to explain what the plot is displaying.\n\nEach layer builds on the previous one, progressively adding more information to the visualization.\n\n***Note***\n\nEvery geometric layer starts with `geom_` in ggplot2.\n\n# Visualising a Single Variable using R\n\nGraphical methods are essential for summarizing and understanding the distribution of a single variable. In this section, we will explore different types of plots for visualizing one variable, based on its type (nominal, ordinal, discrete, or continuous). The key graphical methods include bar charts, boxplots, histograms, and density plots.\n\n## Bar Chart\n\nA **bar chart** is used to represent categorical data (nominal or ordinal). Each bar represents the frequency (or count) of a category. It’s commonly used for visualizing nominal variables like gender or education level.\n\nExample:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Bar chart example for a nominal variable\n\nggplot(df, aes(x = gender)) +\n  geom_bar() +\n  labs(\n    title = \"Bar Chart of Gender\", \n    x = \"Gender\", \n    y = \"Count\")\n```\n\n::: {.cell-output-display}\n![](graphical_descriptive_statistics_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\n\n\n## Boxplot\n\nA boxplot is used to represent the distribution of a continuous variable. It shows the median, quartiles, and potential outliers.\n\nExample:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Boxplot example for a continuous variable\nggplot(df, aes(y = height)) +\n  geom_boxplot() +\n  labs(title = \"Boxplot of Height\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Removed 353 rows containing non-finite outside the scale range\n(`stat_boxplot()`).\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](graphical_descriptive_statistics_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\n\n\n## Histogram\n\nA histogram is used to visualize the distribution of a continuous variable by dividing the data into bins and counting the number of observations in each bin. It’s useful for understanding the shape, spread, and central tendency of continuous variables like age or income.\n\nExample:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Histogram example for a continuous variable\nggplot(df, aes(x = height)) +\n  geom_histogram() +\n  labs(title = \"Histogram of Height\", x = \"Height\", y = \"Frequency\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Removed 353 rows containing non-finite outside the scale range\n(`stat_bin()`).\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](graphical_descriptive_statistics_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\n\n\nHere the x-axis represents height (a continuous variable), and the y-axis represents the frequency of observations in each height bin.\n\nWe can make the histogram more attractive.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(df, aes(x = height)) +\n  geom_histogram(binwidth = 2, \n                 fill = \"blue\", \n                 color = \"black\") +\n  labs(title = \"Histogram of Height\", \n       x = \"Height\", \n       y = \"Frequency\") +\n  theme_minimal()\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Removed 353 rows containing non-finite outside the scale range\n(`stat_bin()`).\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](graphical_descriptive_statistics_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\n\n\n## Density Plot\n\nA density plot is a smoothed version of a histogram, used for continuous data. It provides an estimate of the probability distribution of a continuous variable.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Density plot example for a continuous variable\nggplot(df, aes(x = height)) +\n  geom_density(\n    alpha = 0.5) +\n  labs(\n    title = \"Density Plot of Height\", \n    x = \"Height\") +\ntheme_minimal()\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Removed 353 rows containing non-finite outside the scale range\n(`stat_density()`).\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](graphical_descriptive_statistics_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\n\n\nWe can represent the area under the curve using any color.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Density plot example for a continuous variable\nggplot(df, aes(x = height)) +\n  geom_density(\n    fill = \"green\", \n    alpha = 0.5) +\n  labs(\n    title = \"Density Plot of Height\", \n    x = \"Height\") +\ntheme_minimal()\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Removed 353 rows containing non-finite outside the scale range\n(`stat_density()`).\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](graphical_descriptive_statistics_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n\n\n\n## Combining Multiple Geometries: Overlaying Histogram and Density Plot\n\nOne of the strengths of `ggplot2` is its ability to add multiple geometric shapes (geoms) to a single plot. For example, you can overlay a **density plot** on top of a **histogram** to visualize both the frequency distribution and the smoothed probability distribution of a continuous variable in a single canvas.\n\nExample: Histogram and Density Plot Together\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Combining histogram and density plot\n\n\nlibrary(ggplot2)\n\nggplot(df, aes(x = height)) +\n  # Histogram with density scaling\n  geom_histogram(\n    aes(y = after_stat(density)),        # Normalize the histogram to show density instead of counts\n    binwidth = 2,                # Sets the bin width for the histogram\n    fill = \"blue\",               # Fills the bars with blue color\n    color = \"black\",             # Outlines the bars with black\n    alpha = 0.6                  # Adds transparency to the bars\n  ) +\n  # Density plot\n  geom_density(\n    aes(y = after_stat(density)),        # Ensures the y-axis of density is consistent\n    color = \"red\",               # The density plot will be red\n    linewidth = 1                     # Thickness of the density line\n  ) +\n  # Labels\n  labs(\n    title = \"Histogram and Density Plot of Height\",  # Title for the plot\n    x = \"Height\",                                    # X-axis label\n    y = \"Density\"                                    # Y-axis label\n  ) +\n  theme_minimal()                                     # Apply a clean theme\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Removed 353 rows containing non-finite outside the scale range\n(`stat_bin()`).\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Removed 353 rows containing non-finite outside the scale range\n(`stat_density()`).\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](graphical_descriptive_statistics_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n\n\n\n# Visualising Two Variables using R\n\nWhen working with two variables, visualizing the relationship between them helps reveal patterns, associations, or differences. The appropriate plot depends on the types of variables involved (categorical, continuous, or a combination). In this section, we will explore different graphical methods for visualizing two variables: stacked bar charts, grouped bar charts, scatter plots, box plots by category, and regression lines with standard error.\n\n## Stacked Bar Chart\n\nA **stacked bar chart** is used when both variables are categorical. It displays the distribution of one variable while stacking the bars based on the categories of the second variable.\n\nExample:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Stacked bar chart example for two categorical variables\n\nggplot(df, aes(x = gender, fill = race1)) +\n  geom_bar(position = \"stack\") +\n  labs(title = \"Stacked Bar Chart of Gender by Race\", x = \"Gender\", y = \"Count\", fill = \"Race\")\n```\n\n::: {.cell-output-display}\n![](graphical_descriptive_statistics_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n\n\n\n\n## Grouped Bar Chart\n\nA grouped bar chart is another option for visualizing two categorical variables. Instead of stacking the bars, it places bars for each category side-by-side, allowing for a clearer comparison between categories.\n\nExample:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Grouped bar chart example for two categorical variables\n\n\nggplot(df, aes(x = gender, fill = race1)) +\n  geom_bar(position = \"dodge\") +\n  labs(title = \"Grouped Bar Chart of Gender by Race\", x = \"Gender\", y = \"Count\", fill = \"Race\")\n```\n\n::: {.cell-output-display}\n![](graphical_descriptive_statistics_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\n\n\n\n## Scatter Plot\n\nA scatter plot is used to visualize the relationship between two continuous variables. Each point on the plot represents an observation, and patterns like clusters, trends, or outliers can be detected.\n\nExample:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Scatter plot example for two continuous variables\nggplot(df, aes(x = height, y = weight)) +\n  geom_point() +\n  labs(title = \"Height vs Weight\",\n       caption = \"Source: NHANES Data\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Removed 366 rows containing missing values or values outside the scale range\n(`geom_point()`).\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](graphical_descriptive_statistics_files/figure-html/unnamed-chunk-14-1.png){width=672}\n:::\n:::\n\n\n\n\n## Box Plot by Category\n\nA box plot by category is useful when comparing the distribution of a continuous variable across different categories of a categorical variable. It shows the median, quartiles, and potential outliers within each category.\n\nExample:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Box plot example for a continuous variable by category\n\nggplot(df, aes(x = gender, y = height)) +\n  geom_boxplot() +\n  labs(title = \"Box Plot of Height by Gender\", x = \"Gender\", y = \"Height\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Removed 353 rows containing non-finite outside the scale range\n(`stat_boxplot()`).\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](graphical_descriptive_statistics_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n:::\n\n\n\n\n## Combining Multiple Geometries: Scatter Plot with Regression Line\n\nA scatter plot with a regression line helps visualize the relationship between two continuous variables. Adding a regression line shows the trend, while the standard error (SE) band around the line indicates the uncertainty in the estimate of the relationship.\n\nWhile regression is an inferential method (used for making predictions or understanding relationships), the purpose of this example is to demonstrate how multiple geometries can be combined when visualizing two variables.\n\nExample:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Scatter plot with regression line and SE\n\n\nggplot(df, aes(x = height, y = weight)) +\n  geom_point(color = \"blue\", alpha = 0.6) +    # Add scatter plot points\n  geom_smooth(method = \"lm\",                   # Add a regression line\n              color = \"red\",                   # Set the color of the line\n              se = TRUE,                       # Add the SE band (uncertainty)\n              fill = \"lightgray\",              # Color of the SE band\n              size = 1) +                      # Set thickness of the line\n  labs(\n    title = \"Scatter Plot with Regression Line and SE Band\",  # Title\n    x = \"Height (cm)\",                                        # X-axis label\n    y = \"Weight (kg)\"                                         # Y-axis label\n  ) +\n  theme_minimal()                                              # Apply a clean theme\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`geom_smooth()` using formula = 'y ~ x'\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Removed 366 rows containing non-finite outside the scale range\n(`stat_smooth()`).\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Removed 366 rows containing missing values or values outside the scale range\n(`geom_point()`).\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](graphical_descriptive_statistics_files/figure-html/unnamed-chunk-16-1.png){width=672}\n:::\n:::\n\n\n\n\n# Visualizing Three Variables using R\n\nWhen working with three variables, we can extend basic plots like scatter plots by adding a third variable as an aesthetic element such as color or fill. This allows us to represent more dimensions of the data in a single plot. One common approach is to use **color** to represent a categorical or continuous variable in a scatter plot.\n\nExample: Scatter Plot with Color for a Third Variable\n\nIn this example, we'll create a scatter plot of two continuous variables and use color to represent a third categorical variable. This can help identify patterns or groupings based on the third variable.\n\n#### Example {.unnumbered}\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Scatter plot with color representing a third variable\n\nggplot(df, \n       aes(x = height, \n           y = weight, \n           color = race1)) +\n  geom_point(size = 1, alpha = 0.5) +\n  labs(title = \"Scatter Plot of Height vs Weight by Race\", \n       x = \"Height\", y = \"Weight\", color = \"Race\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Removed 366 rows containing missing values or values outside the scale range\n(`geom_point()`).\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](graphical_descriptive_statistics_files/figure-html/unnamed-chunk-17-1.png){width=672}\n:::\n:::\n\n\n\n\n**Another Way**\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Scatter plot with color representing a third variable\n\nggplot(df, \n       aes(x = height, \n           y = weight)) +\n  geom_point(size = 1) +\n    facet_wrap(~race1)+\n  labs(title = \"Scatter Plot of Height vs Weight by Race\", \n       x = \"Height\", y = \"Weight\", color = \"Race\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Removed 366 rows containing missing values or values outside the scale range\n(`geom_point()`).\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](graphical_descriptive_statistics_files/figure-html/unnamed-chunk-18-1.png){width=672}\n:::\n:::\n\n\n\n\n# Visualizing Four Variables using R\n\nTo visualize four variables, we can use a combination of **color** (or fill) for the third variable and **facet wrapping** for the fourth variable. Facet wrapping creates a series of smaller plots based on the levels of a categorical variable, allowing us to compare the relationships across different subgroups.\n\nExample: Scatter Plot with Color and Facet Wrap\n\nIn this example, we’ll use a scatter plot with color representing a third variable, and facet wrapping to display different plots for each level of the fourth variable.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Scatter plot with color and facet wrap for a fourth variable\nggplot(df, \n       aes(x = height, \n           y = weight,\n           color = gender)) +\n  geom_point(size = 1) +\n    facet_wrap(~race1)+\n  labs(title = \"Scatter Plot of Height vs Weight by Race and gender\", \n       x = \"Height\", y = \"Weight\", color = \"Gender\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Removed 366 rows containing missing values or values outside the scale range\n(`geom_point()`).\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](graphical_descriptive_statistics_files/figure-html/unnamed-chunk-19-1.png){width=672}\n:::\n:::\n",
    "supporting": [
      "graphical_descriptive_statistics_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}